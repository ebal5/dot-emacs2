;;; Code:
(set-default-coding-systems 'utf-8)
(prefer-coding-system 'utf-8)
(use-package ddskk
  :commands (skk-isearch-mode-setup skk-isearch-mode-cleanup)
  :bind (("C-x j" . skk-auto-fill-mode)
	 ("C-x C-j" . skk-mode))
  :init
  (setq skk-jisyo-code 'utf-8)
  (unless (file-exists-p (locate-user-emacs-file "./skk-jisyo"))
    (make-directory "skk-jisyo" (locate-user-emacs-file "./")))
  (unless (file-exists-p (locate-user-emacs-file "ddskk"))
    (make-directory "ddskk" (locate-user-emacs-file "./")))
  (setq default-input-method "japanese-skk")
  (unless (executable-find "cmigemo")
    (progn
      (add-hook 'isearch-mode-hook 'skk-isearch-mode-setup)
      (add-hook 'isearch-mode-end-hook 'skk-isearch-mode-cleanup)
      (defvar skk-isearch-start-mode 'latin))
    )
  (defvar skk-large-jisyo (cons (locate-user-emacs-file "skk-jisyo/SKK-JISYO.Le.utf8")
				'utf-8))
  (defvar skk-extra-jisyo-file-list
    (list
     (cons (locate-user-emacs-file "skk-jisyo/SKK-JISYO.KAO.utf8") 'utf-8)
     (cons (locate-user-emacs-file "skk-jisyo/SKK-JISYO.geo.utf8") 'utf-8)
     (cons (locate-user-emacs-file "skk-jisyo/SKK-JISYO.itaiji.utf8") 'utf-8)
     (cons (locate-user-emacs-file "skk-jisyo/SKK-JISYO.jinmei.utf8") 'utf-8)
     (cons (locate-user-emacs-file "skk-jisyo/SKK-JISYO.JIS3_4.utf8") 'utf-8)
     (cons (locate-user-emacs-file "skk-jisyo/SKK-JISYO.edict.utf8") 'utf-8)
     (cons (locate-user-emacs-file "skk-jisyo/SKK-JISYO.propernoun.utf8") 'utf-8)
     ;(cons (locate-user-emacs-file "skk-jisyo/SKK-JISYO.emoji.utf8") 'utf-8)
    ))
  (defvar skk-show-annotation t)
  (defvar skk-use-azik t)
  (defvar skk-azik-keyboard-type 'jp106)
  (defvar skk-show-annotation-delay 0.5)
  :config
  (defvar skk-byte-compile-init-file t)
  (defvar skk-show-annotation t)
  (defvar skk-get-jisyo-direcroty (locate-user-emacs-file "skk-jisyo"))
  (defvar skk-user-directory (locate-user-emacs-file "ddskk"))
  (defvar skk-dcomp-activate t)
  (defvar skk-dcomp-multiple-activate t)
  (defvar skk-henkan-strict-okuri-precedence t)
  (defvar skk-use-look t)
  (defvar skk-use-color-cursor t)
  (defvar skk-indicator-use-cursor-color t)
  (add-hook 'skk-load-hook (lambda ()
			     (require 'context-skk)
			     (require 'skk-hint)
			     (require 'skk-study)))
  (add-hook 'skk-mode-hook 'my/re-key-chord)
  )

(use-package migemo
  :if (executable-find "cmigemo")
  :config
  (setq migemo-command "cmigemo")
  (setq migemo-options '("-q" "--emacs" "-i" "\a"))
  (setq migemo-dictionary "/usr/local/share/migemo/utf-8/migemo-dict")
  (setq migemo-user-dictionary nil)
  (setq migemo-regex-dictionary nil)
  (setq migemo-coding-system 'utf-8-unix)
  (migemo-init)
  )
;;; 01_language.el ends here
